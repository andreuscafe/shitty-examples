import React, { useEffect } from 'react'
import styles from './Timer.module.scss'
import Head from 'next/head'
import useAppContext from '../../../context/AppContext'

const NUMBERS = {
  0: [1, 1, 1, 0, 1, 1, 1],
  1: [0, 1, 0, 0, 0, 1, 0],
  2: [1, 1, 0, 1, 1, 0, 1],
  3: [1, 1, 0, 1, 0, 1, 1],
  4: [0, 1, 1, 1, 0, 1, 0],
  5: [1, 0, 1, 1, 0, 1, 1],
  6: [1, 0, 1, 1, 1, 1, 1],
  7: [1, 1, 0, 0, 0, 1, 0],
  8: [1, 1, 1, 1, 1, 1, 1],
  9: [1, 1, 1, 1, 0, 1, 1],
}

export default function Timer() {
  const { setCurrentExample } = useAppContext()
  useEffect(() => {
    setCurrentExample({
      title: 'Timer',
      url: 'https://github.com/andreuscafe/shitty-examples/blob/main/pages/examples/timer/Timer.jsx',
    })
  }, [setCurrentExample])

  const [leftSegment, setLeftSegment] = React.useState(NUMBERS[8])
  const [rightSegment, setRightSegment] = React.useState(NUMBERS[8])

  const leftSegmentRef = React.useRef([])
  const rightSegmentRef = React.useRef([])

  const [seconds, setSeconds] = React.useState(10)

  const setDisplay = (timestring) => {
    const left = timestring[0]
    const right = timestring[1]

    setLeftSegment(NUMBERS[left])
    setRightSegment(NUMBERS[right])
  }

  useEffect(() => {
    if (leftSegmentRef.current && leftSegmentRef.current.length) {
      leftSegmentRef.current.forEach((el, i) => {
        el.style.fill = leftSegment[i] ? 'red' : 'rgba(255, 255, 255, 0.1)'
      })
    }
    if (rightSegmentRef.current && rightSegmentRef.current.length) {
      rightSegmentRef.current.forEach((el, i) => {
        el.style.fill = rightSegment[i] ? 'red' : 'rgba(255, 255, 255, 0.1)'
      })
    }
  }, [leftSegment, rightSegment])

  useEffect(() => {
    let timeString = seconds.toString().padStart(2, '0')

    if (seconds > 3600) {
      // 1 hour
      timeString = `${Math.floor(seconds / 3600)
        .toString()
        .padStart(2, '0')}`
    } else if (seconds > 60) {
      // 1 minute
      timeString = `${Math.floor(seconds / 60)
        .toString()
        .padStart(2, '0')}`
    }

    setDisplay(timeString)

    const interval = setInterval(() => {
      setSeconds((s) => {
        if (s == 0) {
          clearInterval(interval)
          return 0
        }

        return s - 1
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [seconds])

  return (
    <>
      <Head>
        <title>Timer | Shitty examples by @andreuscafe</title>
      </Head>
      <div className="h-full flex flex-col items-center justify-center">
        <div className="w-full max-w-[400px] p-8">
          <svg
            viewBox="0 0 860 620"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            className="w-full"
          >
            <rect width="860" height="620" rx="120" fill="#111" />
            <rect x="42" y="42" width="776" height="536" rx="78" fill="#222" />
            <path
              d="M297.128 127.043L281.596 142.298C275.423 148.36 267.118 151.757 258.466 151.757H176.398C167.91 151.757 159.762 148.425 153.707 142.478L138.346 127.391C133.966 123.089 133.935 116.042 138.275 111.702C140.346 109.63 143.156 108.467 146.085 108.467H289.532C292.509 108.467 295.355 109.691 297.402 111.852C301.468 116.143 301.346 122.901 297.128 127.043Z"
              fill="white"
              ref={(el) => {
                leftSegmentRef.current[0] = el
              }}
            />
            <path
              d="M308.394 296.996L292.675 281.277C286.532 275.133 283.08 266.801 283.08 258.112V176.184C283.08 167.66 286.466 159.486 292.493 153.459L308.039 137.913C312.313 133.639 319.271 133.733 323.427 138.121C325.317 140.115 326.37 142.758 326.37 145.506V289.55C326.37 292.343 325.261 295.021 323.286 296.996C319.174 301.108 312.506 301.108 308.394 296.996Z"
              fill="white"
              ref={(el) => {
                leftSegmentRef.current[1] = el
              }}
            />
            <path
              d="M142.445 281.277L126.726 296.996C122.614 301.108 115.946 301.108 111.834 296.996C109.859 295.021 108.75 292.343 108.75 289.55V145.506C108.75 142.758 109.803 140.115 111.693 138.121C115.849 133.733 122.807 133.639 127.081 137.913L142.627 153.459C148.654 159.486 152.04 167.66 152.04 176.184V258.112C152.04 266.801 148.589 275.133 142.445 281.277Z"
              fill="white"
              ref={(el) => {
                leftSegmentRef.current[2] = el
              }}
            />
            <path
              d="M150.785 294.758C154.93 290.5 160.657 288.062 166.6 288.062H268.52C274.463 288.062 280.19 290.5 284.335 294.758C292.675 303.323 292.667 317.085 284.215 325.537C280.117 329.635 274.559 331.937 268.765 331.937H166.355C160.561 331.937 155.003 329.635 150.905 325.537C142.453 317.085 142.445 303.323 150.785 294.758Z"
              fill="white"
              ref={(el) => {
                leftSegmentRef.current[3] = el
              }}
            />
            <path
              d="M142.627 466.54L127.081 482.086C122.807 486.36 115.849 486.266 111.693 481.878C109.803 479.883 108.75 477.24 108.75 474.493V330.951C108.75 328.203 109.803 325.56 111.693 323.566C115.849 319.178 122.807 319.084 127.081 323.358L142.627 338.904C148.654 344.931 152.04 353.105 152.04 361.629V443.815C152.04 452.338 148.654 460.513 142.627 466.54Z"
              fill="white"
              ref={(el) => {
                leftSegmentRef.current[4] = el
              }}
            />
            <path
              d="M308.039 482.086L292.493 466.54C286.466 460.513 283.08 452.338 283.08 443.815V361.628C283.08 353.105 286.466 344.931 292.493 338.904L308.039 323.358C312.313 319.084 319.271 319.178 323.427 323.566C325.317 325.56 326.37 328.203 326.37 330.951V474.493C326.37 477.24 325.317 479.883 323.427 481.878C319.271 486.266 312.313 486.36 308.039 482.086Z"
              fill="white"
              ref={(el) => {
                leftSegmentRef.current[5] = el
              }}
            />
            <path
              d="M289.833 511.532H145.789C143.041 511.532 140.398 510.479 138.404 508.589C134.016 504.432 133.922 497.475 138.196 493.201L153.742 477.655C159.769 471.628 167.943 468.242 176.467 468.242H258.395C267.084 468.242 275.416 471.693 281.56 477.837L297.279 493.556C301.391 497.668 301.391 504.335 297.279 508.448C295.304 510.422 292.626 511.532 289.833 511.532Z"
              fill="white"
              ref={(el) => {
                leftSegmentRef.current[6] = el
              }}
            />
            <path
              d="M574.628 127.043L559.096 142.298C552.923 148.36 544.618 151.757 535.966 151.757H453.898C445.41 151.757 437.262 148.425 431.207 142.478L415.846 127.391C411.466 123.089 411.435 116.042 415.775 111.702C417.846 109.63 420.656 108.467 423.585 108.467H567.032C570.009 108.467 572.855 109.691 574.902 111.852C578.968 116.143 578.846 122.901 574.628 127.043Z"
              fill="white"
              ref={(el) => {
                rightSegmentRef.current[0] = el
              }}
            />
            <path
              d="M585.894 296.996L570.175 281.277C564.032 275.133 560.58 266.801 560.58 258.112V176.184C560.58 167.66 563.966 159.486 569.993 153.459L585.539 137.913C589.813 133.639 596.771 133.733 600.927 138.121C602.817 140.115 603.87 142.758 603.87 145.506V289.55C603.87 292.343 602.761 295.021 600.786 296.996C596.674 301.108 590.006 301.108 585.894 296.996Z"
              fill="white"
              ref={(el) => {
                rightSegmentRef.current[1] = el
              }}
            />
            <path
              d="M419.945 281.277L404.226 296.996C400.114 301.108 393.446 301.108 389.334 296.996C387.359 295.021 386.25 292.343 386.25 289.55V145.506C386.25 142.758 387.303 140.115 389.193 138.121C393.349 133.733 400.307 133.639 404.581 137.913L420.127 153.459C426.154 159.486 429.54 167.66 429.54 176.184V258.112C429.54 266.801 426.089 275.133 419.945 281.277Z"
              fill="white"
              ref={(el) => {
                rightSegmentRef.current[2] = el
              }}
            />
            <path
              d="M428.285 294.758C432.43 290.5 438.157 288.062 444.1 288.062H546.02C551.963 288.062 557.69 290.5 561.835 294.758C570.175 303.323 570.167 317.085 561.715 325.537C557.617 329.635 552.059 331.937 546.265 331.937H443.855C438.061 331.937 432.503 329.635 428.405 325.537C419.953 317.085 419.945 303.323 428.285 294.758Z"
              fill="white"
              ref={(el) => {
                rightSegmentRef.current[3] = el
              }}
            />
            <path
              d="M420.127 466.54L404.581 482.086C400.307 486.36 393.349 486.266 389.193 481.878C387.303 479.883 386.25 477.24 386.25 474.493V330.951C386.25 328.203 387.303 325.56 389.193 323.566C393.349 319.178 400.307 319.084 404.581 323.358L420.127 338.904C426.154 344.931 429.54 353.105 429.54 361.629V443.815C429.54 452.338 426.154 460.513 420.127 466.54Z"
              fill="white"
              ref={(el) => {
                rightSegmentRef.current[4] = el
              }}
            />
            <path
              d="M585.539 482.086L569.993 466.54C563.966 460.513 560.58 452.338 560.58 443.815V361.628C560.58 353.105 563.966 344.931 569.993 338.904L585.539 323.358C589.813 319.084 596.771 319.178 600.927 323.566C602.817 325.56 603.87 328.203 603.87 330.951V474.493C603.87 477.24 602.817 479.883 600.927 481.878C596.771 486.266 589.813 486.36 585.539 482.086Z"
              fill="white"
              ref={(el) => {
                rightSegmentRef.current[5] = el
              }}
            />
            <path
              d="M567.333 511.532H423.289C420.541 511.532 417.898 510.479 415.904 508.589C411.516 504.432 411.422 497.475 415.696 493.201L431.242 477.655C437.269 471.628 445.443 468.242 453.967 468.242H535.895C544.584 468.242 552.916 471.693 559.06 477.837L574.779 493.556C578.891 497.668 578.891 504.335 574.779 508.448C572.804 510.422 570.126 511.532 567.333 511.532Z"
              fill="white"
              ref={(el) => {
                rightSegmentRef.current[6] = el
              }}
            />
            <path
              d="M672.227 158.09C672.227 146.216 681.852 136.59 693.727 136.59H729.727C741.601 136.59 751.227 146.216 751.227 158.09C751.227 169.964 741.601 179.59 729.727 179.59H693.727C681.852 179.59 672.227 169.964 672.227 158.09Z"
              fill="rgba(255, 255, 255, 0.1)"
            />
            <path
              d="M672.25 235.408C672.25 223.533 681.876 213.908 693.75 213.908H729.75C741.624 213.908 751.25 223.533 751.25 235.408C751.25 247.282 741.624 256.908 729.75 256.908H693.75C681.876 256.908 672.25 247.282 672.25 235.408Z"
              fill="rgba(255, 255, 255, 0.1)"
            />
            <path
              d="M672.25 312.031C672.25 300.157 681.876 290.531 693.75 290.531H729.75C741.624 290.531 751.25 300.157 751.25 312.031C751.25 323.906 741.624 333.531 729.75 333.531H693.75C681.876 333.531 672.25 323.906 672.25 312.031Z"
              fill="rgba(255, 255, 255, 0.1)"
            />
            <path
              d="M672.25 386.531C672.25 374.657 681.876 365.031 693.75 365.031H729.75C741.624 365.031 751.25 374.657 751.25 386.531C751.25 398.406 741.624 408.031 729.75 408.031H693.75C681.876 408.031 672.25 398.406 672.25 386.531Z"
              fill="rgba(255, 255, 255, 0.1)"
            />
            <path
              d="M672.25 463.525C672.25 451.651 681.876 442.025 693.75 442.025H729.75C741.624 442.025 751.25 451.651 751.25 463.525C751.25 475.399 741.624 485.025 729.75 485.025H693.75C681.876 485.025 672.25 475.399 672.25 463.525Z"
              fill="rgba(255, 255, 255, 0.1)"
            />
          </svg>
        </div>
        <button
          className="bg-black px-4 py-2 rounded-lg"
          onClick={() => {
            setSeconds(seconds + 300)
          }}
        >
          Sumar 5 minutos
        </button>
        <span>
          {Math.floor(seconds / 3600)} horas, {Math.floor((seconds / 60) % 60)}{' '}
          minutos, {Math.floor(seconds % 60)} segundos restantes.
        </span>
      </div>
    </>
  )
}
